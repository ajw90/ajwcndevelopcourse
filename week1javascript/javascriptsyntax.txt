**********************************************************
JavaScript Syntax
**********************************************************

Essentials:
===========

<file>.js

// <single-line comment>

/* <comment> */

**********************************************************

Operators:
==========

Unary: 
------

++/--n *** adds/subtracts 1 from n, then returns the value n

n++/-- *** returns the value of n, then adds/subtracts 1

!n *** returns true if n is false

~n *** where n is a number, the 0s and 1s in n's binary representation are swapped *** 0101 ---> 1010

typeof x *** returns a string giving the type of x (according to JS logic)

Binary: 
-------

a, b *** evaluates a and b but only returns the value of b

+ - * / % **

== != *** value comparison

=== !== *** type and value comparison

> >= < <=

&& ||

a = b *** places the value of b in a, then returns the new value of a

<operator>= *** a <op>= b equals a = a <op>= b

a instanceof b *** returns true if b is the prototype of a

Ternary: 
--------

<condition> ? <return this if true> : <return this if false>

**********************************************************

Statements: 
===========

<basic statement>;

{<block>}

***

if (<condition>) {
    <code>
}
else if (<condition>) {
    <code>
}
...
else {
    <code>
}

switch (<test value>) {
    case <possible value>: <code>
    ...
    default: <code>
}

***

for (<expr once before loop>; <expr condition before each iteration>; <expr after each iteration>) {
    <code>
}

while (<condition run before each iteration>) {
    <code>
}

break; *** jump to point in program directly after loop
continue *** jump to end of current iteration 

***

let <variable scoped to block> <optional assignment>;

const <constant scoped to block> <mandatory assignment>;

var <variable scoped to function> <optional assignment>; *** Try to avoid this

***

return <value>; *** stop executing function at this point - <value> is returned to the program at the point at which
                    the function was callede

**********************************************************

Types:
======

undefined *** the value of a variable to which no value has been given or an empty expression

null *** the intentional absence of value - as opposed to "undefined"

***this

"<string>" - ordinary string

`<template string> ${value to be embedded in template}>` - Template string

0 1 <number>.<number> <number>e<exp> Infinity -Infinity NaN - Numbers

true false *** boolean

***

[<value at 0>, ..., <value at position n - 1] - array of length n

<array>[<n>] *** nth element of <array>

***

(<parameter, ...>) => {<code>} *** arrow function (use this) - cannot be used within objects
                                   With a single argument, the parentheses on the parameter list can be omitted.
                                   Braces can be omitted when the function body is a single statement.

function (<parameter, ...>) {<code>}

function <function name> (<parameter, ...>) {<code>} *** function declaration

***

{<property>: <value>, ...} *** object *** property can be an integer, a string, or a valid JS variable name

<object>.<property> 
<object>[<string or integer>] 

this *** Within an object method, "this" refers to the object on which the method is currently being called.
        Given a.method(), within ".method", this would take the value a;
        Given z.method(), within ".method", this would take the value z;
        ...
        Outside of any function, "this" refers to the global object; variables declared in the global scope (or 
        within a block or function without "let", "var", or "const") are properties of the global object.

***

class {
    constructor (<...>) {<code>} *** This method is used to construct new objects of this type
    method (<parameters, ...>) {
        <code>
    }
}

class <Class Name> {<as above>} // class declaration as opposed to the above which is a class expression 

new <Class Name> (<arguments passed to constructor>) *** this returns a new object based on <Class Name>